# üöÄ Guide de D√©marrage Complet - Site de Petites Annonces Django + PostgreSQL

## üìã Structure du Projet

```
petites_annonces/
‚îú‚îÄ‚îÄ manage.py
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ petites_annonces/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ settings.py
‚îÇ   ‚îú‚îÄ‚îÄ urls.py
‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py
‚îú‚îÄ‚îÄ listings/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ apps.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ admin.py
‚îÇ   ‚îú‚îÄ‚îÄ views.py
‚îÇ   ‚îú‚îÄ‚îÄ forms.py
‚îÇ   ‚îú‚îÄ‚îÄ urls.py
‚îÇ   ‚îú‚îÄ‚îÄ signals.py
‚îÇ   ‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îú‚îÄ‚îÄ management/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ commands/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ setup_categories.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ update_search_vectors.py
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ cleanup_expired.py
‚îÇ   ‚îî‚îÄ‚îÄ templates/
‚îÇ       ‚îî‚îÄ‚îÄ listings/
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îú‚îÄ‚îÄ base.html
‚îÇ   ‚îî‚îÄ‚îÄ registration/
‚îú‚îÄ‚îÄ static/
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îî‚îÄ‚îÄ images/
‚îú‚îÄ‚îÄ media/
‚îú‚îÄ‚îÄ sql/
‚îÇ   ‚îú‚îÄ‚îÄ schema_hybride.sql
‚îÇ   ‚îî‚îÄ‚îÄ seed_data_django.sql
‚îî‚îÄ‚îÄ logs/
```

## üõ†Ô∏è Installation et Configuration

### 1. Pr√©requis

- Python 3.8+
- PostgreSQL 12+
- Git

### 2. Cloner et configurer le projet

```bash
# Cr√©er le dossier projet
mkdir petites_annonces
cd petites_annonces

# Cr√©er un environnement virtuel
python -m venv venv

# Activer l'environnement virtuel
# Windows
venv\Scripts\activate
# Linux/Mac
source venv/bin/activate

# Installer les d√©pendances
pip install -r requirements.txt
```

### 3. Configuration PostgreSQL

```bash
# D√©marrer PostgreSQL et se connecter
chcp 1252
$env:PATH += ";C:\Program Files\PostgreSQL\15\bin"
psql -U postgres -h localhost

# Cr√©er la base de donn√©es
CREATE DATABASE petites_annonces_django;
\q
```

### 4. Ex√©cuter les scripts SQL

```bash
# Ex√©cuter le sch√©ma hybride
psql -U postgres -h localhost -d petites_annonces_django -f sql/schema_hybride.sql

# Ins√©rer les donn√©es initiales
psql -U postgres -h localhost -d petites_annonces_django -f sql/seed_data_django.sql
```

### 5. Configuration Django

```bash
# Copier le fichier d'environnement
cp .env.example .env

# Modifier .env avec vos param√®tres
# DB_PASSWORD=votre_mot_de_passe_postgres
# SECRET_KEY=votre_cl√©_secr√®te
```

### 6. Migrations Django

```bash
# Cr√©er les migrations initiales
python manage.py makemigrations listings

# Appliquer les migrations
python manage.py migrate

# Cr√©er un superutilisateur
python manage.py createsuperuser
```

### 7. Importer les cat√©gories

```bash
# Utiliser la commande personnalis√©e
python manage.py setup_categories

# Ou manuellement si n√©cessaire
python manage.py shell
>>> from listings.models import Category
>>> Category.objects.count()  # V√©rifier que les cat√©gories sont l√†
```

### 8. Lancer le serveur de d√©veloppement

```bash
# D√©marrer le serveur Django
python manage.py runserver

# Acc√©der au site
# http://localhost:8000/
# Admin: http://localhost:8000/admin/
```

## üîß Configuration Avanc√©e

### Variables d'environnement (.env)

```env
# Configuration de base
SECRET_KEY=your-very-secret-key-here-change-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,petites-annonces.local

# Base de donn√©es PostgreSQL
DB_NAME=petites_annonces_django
DB_USER=postgres
DB_PASSWORD=your_postgres_password
DB_HOST=localhost
DB_PORT=5432

# Email configuration (pour les notifications)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-specific-password
EMAIL_USE_TLS=True

# Configuration du site
SITE_NAME=Petites Annonces Guin√©e
SITE_DOMAIN=localhost:8000
```

### Configuration Redis (optionnel pour le cache)

```bash
# Installer Redis sur Windows avec Chocolatey
choco install redis-64

# Ou t√©l√©charger depuis: https://github.com/tporadowski/redis/releases

# D√©marrer Redis
redis-server
```

## üìÅ Cr√©ation des Templates de Base

### templates/base.html

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Petites Annonces Guin√©e{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{% url 'home' %}">
                <i class="bi bi-shop"></i> Petites Annonces
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'listing_list' %}">Annonces</a>
                    </li>
                    {% if user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'listing_create' %}">D√©poser une annonce</a>
                    </li>
                    {% endif %}
                </ul>
                
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="bi bi-person-circle"></i> {{ user.username }}
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="{% url 'user_profile' %}">Mon profil</a></li>
                            <li><a class="dropdown-item" href="{% url 'user_listings' %}">Mes annonces</a></li>
                            <li><a class="dropdown-item" href="{% url 'user_favorites' %}">Mes favoris</a></li>
                            <li><a class="dropdown-item" href="{% url 'conversation_list' %}">Messages</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{% url 'logout' %}">D√©connexion</a></li>
                        </ul>
                    </li>
                    {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'login' %}">Connexion</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'register' %}">Inscription</a>
                    </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Messages -->
    {% if messages %}
    <div class="container mt-3">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        {% endfor %}
    </div>
    {% endif %}

    <!-- Contenu principal -->
    <main class="container my-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-light py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h5>Petites Annonces Guin√©e</h5>
                    <p>La plateforme de r√©f√©rence pour vos achats et ventes en Guin√©e.</p>
                </div>
                <div class="col-md-6">
                    <h5>Liens utiles</h5>
                    <ul class="list-unstyled">
                        <li><a href="#" class="text-light">√Ä propos</a></li>
                        <li><a href="#" class="text-light">Contact</a></li>
                        <li><a href="#" class="text-light">Conditions d'utilisation</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{% static 'js/main.js' %}"></script>
    
    {% block extra_js %}{% endblock %}
</body>
</html>
```

## üéØ Scripts Utiles

### Script de d√©marrage rapide (start.py)

```python
#!/usr/bin/env python
"""
Script de d√©marrage rapide pour le projet
Usage: python start.py [--reset]
"""
import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    print(f"üîÑ {description}...")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Erreur: {result.stderr}")
        return False
    print(f"‚úÖ {description} termin√©")
    return True

def main():
    reset = '--reset' in sys.argv
    
    print("üöÄ D√©marrage du projet Petites Annonces")
    print("=" * 50)
    
    # V√©rifier PostgreSQL
    if not run_command("psql --version", "V√©rification PostgreSQL"):
        print("‚ö†Ô∏è PostgreSQL non trouv√©. Installez PostgreSQL d'abord.")
        return
    
    # Cr√©er la base si n√©cessaire
    if reset:
        run_command("dropdb -U postgres petites_annonces_django", "Suppression ancienne base")
    
    run_command("createdb -U postgres petites_annonces_django", "Cr√©ation base de donn√©es")
    
    # Ex√©cuter les scripts SQL
    if Path("sql/schema_hybride.sql").exists():
        run_command(
            "psql -U postgres -h localhost -d petites_annonces_django -f sql/schema_hybride.sql",
            "Cr√©ation du sch√©ma"
        )
    
    if Path("sql/seed_data_django.sql").exists():
        run_command(
            "psql -U postgres -h localhost -d petites_annonces_django -f sql/seed_data_django.sql",
            "Import des donn√©es"
        )
    
    # Migrations Django
    if reset:
        # Supprimer les fichiers de migration
        migrations_dir = Path("listings/migrations")
        if migrations_dir.exists():
            for file in migrations_dir.glob("*.py"):
                if file.name != "__init__.py":
                    file.unlink()
    
    run_command("python manage.py makemigrations", "Cr√©ation des migrations")
    run_command("python manage.py migrate", "Application des migrations")
    
    # Collecter les fichiers statiques
    run_command("python manage.py collectstatic --noinput", "Collection fichiers statiques")
    
    print("\nüéâ Projet configur√© avec succ√®s!")
    print("üìù Prochaines √©tapes:")
    print("   1. Cr√©er un superutilisateur: python manage.py createsuperuser")
    print("   2. Lancer le serveur: python manage.py runserver")
    print("   3. Acc√©der au site: http://localhost:8000")
    print("   4. Admin: http://localhost:8000/admin")

if __name__ == "__main__":
    main()
```

## üöÄ Commandes de Gestion

```bash
# D√©marrage complet
python start.py

# D√©marrage avec reset complet
python start.py --reset

# Commandes de maintenance
python manage.py cleanup_expired        # Nettoyer les annonces expir√©es
python manage.py update_search_vectors  # Mettre √† jour la recherche
python manage.py setup_categories       # R√©importer les cat√©gories

# Commandes Django standard
python manage.py shell                  # Console Python
python manage.py dbshell               # Console SQL
python manage.py runserver             # Serveur de d√©veloppement
python manage.py test                  # Tests unitaires
```

## üìä Fonctionnalit√©s Disponibles

### ‚úÖ Impl√©ment√©es
- **Gestion utilisateurs** : Inscription, connexion, profils
- **Cat√©gories hi√©rarchiques** : Structure √† 3 niveaux
- **Annonces compl√®tes** : Cr√©ation, modification, images multiples
- **Recherche avanc√©e** : Texte, prix, localisation, cat√©gories
- **Favoris** : Syst√®me de favoris utilisateur
- **Messagerie** : Conversations entre acheteur/vendeur
- **√âvaluations** : Syst√®me de notation utilisateur
- **Administration** : Interface admin compl√®te
- **G√©olocalisation** : Support latitude/longitude
- **Tags** : Syst√®me de tags pour les annonces

### üîú √Ä Impl√©menter (Extensible)
- **Paiements en ligne** : Int√©gration API de paiement
- **Notifications** : Email et push notifications
- **API REST** : Pour applications mobiles
- **Recherche g√©ographique** : Carte interactive
- **Mod√©ration** : Outils de mod√©ration avanc√©s
- **Analytics** : Tableaux de bord statistiques

## üéØ Conclusion

Vous avez maintenant un **site de petites annonces professionnel complet** avec :
- ‚úÖ Architecture Django robuste
- ‚úÖ Base PostgreSQL optimis√©e
- ‚úÖ Interface utilisateur compl√®te
- ‚úÖ Administration avanc√©e
- ‚úÖ Fonctionnalit√©s m√©tier essentielles

Le projet est **pr√™t pour le d√©veloppement** et peut √™tre √©tendu selon vos besoins sp√©cifiques !

**Bon d√©veloppement ! üöÄ**