# üè™ Petites Annonces - Guide d'Installation Complet

## üìã Vue d'ensemble du projet

Ce projet Django offre une plateforme compl√®te de petites annonces avec toutes les fonctionnalit√©s modernes :

### ‚ú® Fonctionnalit√©s principales
- **Interface moderne** inspir√©e de LeBonCoin avec design responsive
- **Gestion compl√®te des annonces** avec photos, cat√©gories, et g√©olocalisation
- **Syst√®me d'authentification** complet avec profils utilisateurs
- **Messagerie int√©gr√©e** entre acheteurs et vendeurs
- **API REST** pour int√©grations et applications mobiles
- **Notifications temps r√©el** via WebSockets
- **Syst√®me de favoris** et alertes personnalis√©es
- **Administration Django** pour la mod√©ration
- **Tests automatis√©s** et CI/CD
- **D√©ploiement Docker** pr√™t pour la production

---

## üöÄ Installation rapide (d√©veloppement)

### 1. Pr√©requis
```bash
# Python 3.11+
python --version

# Git
git --version

# PostgreSQL (optionnel, SQLite par d√©faut)
# Redis (pour cache et t√¢ches asynchrones)
```

### 2. Installation
```bash
# Cloner le projet
git clone https://github.com/votre-username/petites-annonces.git
cd petites-annonces

# Cr√©er l'environnement virtuel
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

# Installer les d√©pendances
pip install -r requirements.txt

# Configurer la base de donn√©es
python manage.py makemigrations
python manage.py migrate

# Cr√©er les cat√©gories par d√©faut
python manage.py create_categories

# Cr√©er un superutilisateur
python manage.py createsuperuser

# Importer des donn√©es de test (optionnel)
python manage.py import_donnees_test --nb-users 20 --nb-annonces 100

# Lancer le serveur
python manage.py runserver
```

### 3. Acc√®s √† l'application
- **Site web :** http://localhost:8000
- **Admin Django :** http://localhost:8000/admin
- **API REST :** http://localhost:8000/api/
- **Documentation API :** http://localhost:8000/api/docs/

---

## üèóÔ∏è Architecture du projet

```
petites_annonces/
‚îú‚îÄ‚îÄ üìÅ petites_annonces/          # Configuration Django
‚îÇ   ‚îú‚îÄ‚îÄ settings/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py              # Configuration de base
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ development.py       # Configuration d√©veloppement
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ production.py        # Configuration production
‚îÇ   ‚îú‚îÄ‚îÄ urls.py
‚îÇ   ‚îî‚îÄ‚îÄ wsgi.py
‚îú‚îÄ‚îÄ üìÅ annonces/                  # Application principale
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ api/                  # API REST
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ serializers.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ views.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ management/commands/   # Commandes Django
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ create_categories.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ import_donnees_test.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ templates/            # Templates HTML
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ registration/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ annonces/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ tests/                # Tests automatis√©s
‚îÇ   ‚îú‚îÄ‚îÄ models.py               # Mod√®les de donn√©es
‚îÇ   ‚îú‚îÄ‚îÄ views.py                # Vues Django
‚îÇ   ‚îú‚îÄ‚îÄ forms.py                # Formulaires
‚îÇ   ‚îú‚îÄ‚îÄ urls.py                 # URLs de l'app
‚îÇ   ‚îú‚îÄ‚îÄ admin.py                # Interface admin
‚îÇ   ‚îú‚îÄ‚îÄ signals.py              # Signaux Django
‚îÇ   ‚îú‚îÄ‚îÄ tasks.py                # T√¢ches Celery
‚îÇ   ‚îî‚îÄ‚îÄ utils.py                # Utilitaires
‚îú‚îÄ‚îÄ üìÅ media/                    # Fichiers upload√©s
‚îú‚îÄ‚îÄ üìÅ static/                   # Fichiers statiques
‚îú‚îÄ‚îÄ üìÅ monitoring/               # Monitoring et m√©triques
‚îú‚îÄ‚îÄ üìÅ scripts/                  # Scripts de d√©ploiement
‚îú‚îÄ‚îÄ üìÑ requirements.txt          # D√©pendances Python
‚îú‚îÄ‚îÄ üìÑ Dockerfile              # Configuration Docker
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml      # Services Docker
‚îú‚îÄ‚îÄ üìÑ nginx.conf              # Configuration Nginx
‚îî‚îÄ‚îÄ üìÑ pytest.ini             # Configuration tests
```

---

## üîß Configuration avanc√©e

### Variables d'environnement (.env)
```bash
# Base
DEBUG=True
SECRET_KEY=your-secret-key-here
ALLOWED_HOSTS=localhost,127.0.0.1

# Base de donn√©es
DATABASE_URL=postgresql://user:password@localhost:5432/petites_annonces

# Redis
REDIS_URL=redis://localhost:6379/0

# Email
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# AWS S3 (production)
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_STORAGE_BUCKET_NAME=your-bucket

# Monitoring
SENTRY_DSN=your-sentry-dsn
```

### Services requis

#### PostgreSQL
```bash
# Installation Ubuntu/Debian
sudo apt update
sudo apt install postgresql postgresql-contrib

# Cr√©ation de la base
sudo -u postgres createdb petites_annonces
sudo -u postgres createuser --interactive
```

#### Redis
```bash
# Installation Ubuntu/Debian
sudo apt install redis-server

# D√©marrage
sudo systemctl start redis-server
sudo systemctl enable redis-server
```

#### Celery (t√¢ches asynchrones)
```bash
# Dans un terminal s√©par√©
celery -A petites_annonces worker --loglevel=info

# Pour les t√¢ches programm√©es
celery -A petites_annonces beat --loglevel=info
```

---

## üê≥ D√©ploiement avec Docker

### D√©veloppement
```bash
# Construire et lancer tous les services
docker-compose up --build

# En arri√®re-plan
docker-compose up -d

# Voir les logs
docker-compose logs -f web
```

### Production
```bash
# Utiliser le fichier de production
docker-compose -f docker-compose.prod.yml up -d

# Migrations en production
docker-compose exec web python manage.py migrate

# Collecte des fichiers statiques
docker-compose exec web python manage.py collectstatic --noinput
```

---

## üß™ Tests et qualit√©

### Lancer les tests
```bash
# Tests Django
python manage.py test

# Tests avec pytest
pytest

# Tests avec couverture
pytest --cov=annonces --cov-report=html

# Tests de performance
python manage.py test tests.test_performance
```

### Qualit√© du code
```bash
# Linting avec flake8
flake8 annonces/

# Formatage avec black
black annonces/

# Import sorting avec isort
isort annonces/
```

---

## üìä Monitoring et maintenance

### M√©triques
- **Prometheus :** http://localhost:9090
- **Grafana :** http://localhost:3000
- **Health check :** http://localhost:8000/health/

### Logs
```bash
# Logs en d√©veloppement
python manage.py runserver --verbosity=2

# Logs Docker
docker-compose logs -f

# Logs en production
tail -f /var/log/django/petites_annonces.log
```

### T√¢ches de maintenance
```bash
# Nettoyage des notifications anciennes
python manage.py clearsessions
python manage.py nettoyer_notifications_anciennes

# Optimisation des images
python manage.py optimiser_images --quality=85 --max-width=1200

# Backup de la base
pg_dump petites_annonces > backup_$(date +%Y%m%d).sql
```

---

## üöÄ D√©ploiement en production

### 1. Serveur VPS (Ubuntu 22.04)
```bash
# Mise √† jour du syst√®me
sudo apt update && sudo apt upgrade -y

# Installation des d√©pendances
sudo apt install python3-pip python3-venv nginx postgresql redis-server

# Installation de Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER
```

### 2. Configuration Nginx
```bash
# Copier la configuration
sudo cp nginx.conf /etc/nginx/sites-available/petites-annonces
sudo ln -s /etc/nginx/sites-available/petites-annonces /etc/nginx/sites-enabled/

# Test et restart
sudo nginx -t
sudo systemctl restart nginx
```

### 3. SSL avec Let's Encrypt
```bash
# Installation Certbot
sudo apt install certbot python3-certbot-nginx

# G√©n√©ration du certificat
sudo certbot --nginx -d petites-annonces.com -d www.petites-annonces.com
```

### 4. Services systemd
```bash
# Cr√©er les fichiers service pour Gunicorn, Celery, etc.
sudo systemctl enable gunicorn
sudo systemctl enable celery
sudo systemctl start gunicorn
sudo systemctl start celery
```

---

## üì± API REST - Documentation

### Endpoints principaux

#### Annonces
```bash
# Liste des annonces
GET /api/annonces/
POST /api/annonces/

# D√©tail d'une annonce
GET /api/annonces/{id}/
PUT /api/annonces/{id}/
DELETE /api/annonces/{id}/

# Recherche avanc√©e
GET /api/annonces/recherche/?q=terme&categorie=1&prix_min=100
```

#### Utilisateur
```bash
# Mes annonces
GET /api/mes-annonces/

# Favoris
POST /api/favoris/toggle/{annonce_id}/

# Notifications
GET /api/notifications/
POST /api/notifications/{id}/marquer-lue/
```

### Authentification API
```python
# Token d'authentification
from rest_framework.authtoken.models import Token
token = Token.objects.create(user=user)

# Headers de requ√™te
headers = {'Authorization': f'Token {token.key}'}
```

---

## üîß Personnalisation et extension

### Ajouter une nouvelle fonctionnalit√©

1. **Mod√®le :** Cr√©er le mod√®le dans `models.py`
2. **Migration :** `python manage.py makemigrations`
3. **Vue :** Ajouter la vue dans `views.py`
4. **Template :** Cr√©er le template HTML
5. **URL :** Ajouter l'URL dans `urls.py`
6. **Tests :** √âcrire les tests dans `tests/`

### Exemples d'extensions possibles
- **Syst√®me de notation** (√©toiles pour les vendeurs)
- **Chat en temps r√©el** (avec WebRTC)
- **Paiement int√©gr√©** (Stripe, PayPal)
- **Application mobile** (React Native, Flutter)
- **Machine learning** (recommandations personnalis√©es)

---

## üõ†Ô∏è Troubleshooting

### Probl√®mes courants

#### Base de donn√©es
```bash
# Reset de la base
python manage.py flush
python manage.py migrate
python manage.py create_categories
```

#### Permissions m√©dias
```bash
sudo chown -R www-data:www-data /path/to/media/
sudo chmod -R 755 /path/to/media/
```

#### M√©moire insuffisante
```bash
# Ajuster les workers Gunicorn
gunicorn --workers=2 --max-requests=1000 petites_annonces.wsgi:application
```

#### Probl√®mes de cache
```bash
# Vider le cache Redis
redis-cli FLUSHALL

# Cache Django
python manage.py shell -c "from django.core.cache import cache; cache.clear()"
```

---

## üìà Performance et optimisation

### Optimisations recommand√©es

1. **Base de donn√©es**
   - Index sur les champs de recherche fr√©quente
   - `select_related()` et `prefetch_related()`
   - Pagination efficace

2. **Cache**
   - Cache des vues avec `@cache_page`
   - Cache des templates avec `{% cache %}`
   - Cache Redis pour les sessions

3. **Images**
   - Compression automatique
   - Formats WebP pour les navigateurs compatibles
   - CDN pour la diffusion globale

4. **Frontend**
   - Minification CSS/JS
   - Compression Gzip/Brotli
   - Lazy loading des images

---

## üîí S√©curit√©

### Checklist de s√©curit√©

- [ ] HTTPS activ√© avec certificat valide
- [ ] Headers de s√©curit√© configur√©s
- [ ] Rate limiting sur l'API
- [ ] Validation stricte des uploads
- [ ] Logs de s√©curit√© activ√©s
- [ ] Sauvegardes automatiques
- [ ] Mises √† jour r√©guli√®res des d√©pendances

### Configuration de s√©curit√©
```python
# settings/production.py
SECURE_SSL_REDIRECT = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
```

---

## üìö Ressources suppl√©mentaires

### Documentation
- [Django Documentation](https://docs.djangoproject.com/)
- [Django REST Framework](https://www.django-rest-framework.org/)
- [Celery Documentation](https://docs.celeryproject.org/)

### Communaut√©
- [Django Forum](https://forum.djangoproject.com/)
- [Stack Overflow](https://stackoverflow.com/questions/tagged/django)
- [Reddit r/django](https://www.reddit.com/r/django/)

### Outils utiles
- [Django Debug Toolbar](https://django-debug-toolbar.readthedocs.io/)
- [Django Extensions](https://django-extensions.readthedocs.io/)
- [Sentry](https://sentry.io/) pour le monitoring d'erreurs

---

## üéØ Roadmap et prochaines √©tapes

### Version 2.0 (prochaines fonctionnalit√©s)
- [ ] Application mobile React Native
- [ ] Intelligence artificielle pour la mod√©ration
- [ ] Syst√®me de recommandations personnalis√©es
- [ ] Int√©gration de paiement s√©curis√©
- [ ] Tableau de bord analytique avanc√©
- [ ] API GraphQL
- [ ] Mode hors ligne (PWA)

### Contributions
Les contributions sont les bienvenues ! Consultez `CONTRIBUTING.md` pour les guidelines.

---

## üìû Support

Pour toute question ou probl√®me :
- **Email :** support@petites-annonces.com
- **GitHub Issues :** https://github.com/votre-username/petites-annonces/issues
- **Documentation :** https://docs.petites-annonces.com

---

## üìÑ Licence

Ce projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de d√©tails.

---

**üéâ F√©licitations ! Votre plateforme de petites annonces est maintenant pr√™te √† √™tre utilis√©e et d√©ploy√©e en production !**

> **Note :** Ce guide couvre une installation compl√®te avec toutes les fonctionnalit√©s avanc√©es. Pour un d√©marrage rapide, vous pouvez commencer par l'installation de base et ajouter progressivement les fonctionnalit√©s selon vos besoins.